-- MySQL Script generated by MySQL Workbench
-- Sat Apr 26 23:43:15 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema paymybuddy
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema paymybuddy
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `paymybuddy` DEFAULT CHARACTER SET utf8 ;
USE `paymybuddy` ;

-- -----------------------------------------------------
-- Table `paymybuddy`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `paymybuddy`.`user` ;

CREATE TABLE IF NOT EXISTS `paymybuddy`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(16) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `deleted_at` DATETIME NULL DEFAULT NULL,
  `password` VARCHAR(255) NOT NULL,
  `balance` DECIMAL(10,2) UNSIGNED NOT NULL,
  `active_email` VARCHAR(255) GENERATED ALWAYS AS (CASE WHEN deleted_at IS NULL THEN email ELSE NULL END) VIRTUAL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `active_email_UNIQUE` (`active_email` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `paymybuddy`.`transaction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `paymybuddy`.`transaction` ;

CREATE TABLE IF NOT EXISTS `paymybuddy`.`transaction` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `sender` INT NOT NULL,
  `receiver` INT NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  `amount` DECIMAL(10,2) NOT NULL,
  `date` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_transaction_sender_idx` (`sender` ASC) VISIBLE,
  INDEX `fk_transaction_receiver_idx` (`receiver` ASC) VISIBLE,
  INDEX `amount_idx` (`amount` ASC) VISIBLE,
  CONSTRAINT `fk_transaction_sender`
    FOREIGN KEY (`sender`)
    REFERENCES `paymybuddy`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_transaction_receiver`
    FOREIGN KEY (`receiver`)
    REFERENCES `paymybuddy`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `paymybuddy`.`user_beneficiary`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `paymybuddy`.`user_beneficiary` ;

CREATE TABLE IF NOT EXISTS `paymybuddy`.`user_beneficiary` (
  `user_id` INT NOT NULL,
  `beneficiary_id` INT NOT NULL,
  INDEX `fk_userbeneficiary_user_id_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_userbeneficiary_beneficiary_id_idx` (`beneficiary_id` ASC) VISIBLE,
  PRIMARY KEY (`user_id`, `beneficiary_id`),
  CONSTRAINT `fk_userbeneficiary_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `paymybuddy`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_userbeneficiary_beneficiary_id`
    FOREIGN KEY (`beneficiary_id`)
    REFERENCES `paymybuddy`.`user` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `paymybuddy`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `paymybuddy`;
INSERT INTO `paymybuddy`.`user` (`username`, `email`, `deleted_at`, `password`, `balance`) VALUES ('Georgia', 'georgia@email.com', NULL, 'georgia_password', 100.00);
INSERT INTO `paymybuddy`.`user` (`username`, `email`, `deleted_at`, `password`, `balance`) VALUES ('Tanka', 'tanka@email.com', NULL, 'tanka_password', 100.00);
INSERT INTO `paymybuddy`.`user` (`username`, `email`, `deleted_at`, `password`, `balance`) VALUES ('Bagheera', 'bagheera@email.com', NULL, 'bagheera_password', 100.00);

COMMIT;

-- -----------------------------------------------------
-- Data for table `paymybuddy`.`user_beneficiary`
-- -----------------------------------------------------
START TRANSACTION;
USE `paymybuddy`;
INSERT INTO `paymybuddy`.`user_beneficiary` (`user_id`, `beneficiary_id`) VALUES (1, 2);

COMMIT;

-- -----------------------------------------------------
-- Data for table `paymybuddy`.`transaction`
-- -----------------------------------------------------
START TRANSACTION;
USE `paymybuddy`;
INSERT INTO `paymybuddy`.`transaction` (`sender`, `receiver`, `description`, `amount`, `date`) 
SELECT 1, 2, 'parc aquatique', 18, NOW()
WHERE EXISTS (SELECT 1 FROM `paymybuddy`.`user_beneficiary` WHERE `user_id` = 1 AND `beneficiary_id` = 2);

-- -----------------------------------------------------
-- Update table `paymybuddy`.`transaction`
-- -----------------------------------------------------
UPDATE `paymybuddy`.`user` SET `balance` = `balance` - 18 WHERE `id` = 1 AND EXISTS (SELECT 1 FROM `paymybuddy`.`user_beneficiary` WHERE `user_id` = 1 AND `beneficiary_id` = 2);
UPDATE `paymybuddy`.`user` SET `balance` = `balance` + 18 WHERE `id` = 2 AND EXISTS (SELECT 1 FROM `paymybuddy`.`user_beneficiary` WHERE `user_id` = 1 AND `beneficiary_id` = 2);

COMMIT;

