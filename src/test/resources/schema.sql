-- -----------------------------------------------------
-- Table role
-- -----------------------------------------------------
DROP TABLE IF EXISTS role;

CREATE TABLE IF NOT EXISTS role (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE
);

-- -----------------------------------------------------
-- Table app_user
-- -----------------------------------------------------
DROP TABLE IF EXISTS app_user;

CREATE TABLE IF NOT EXISTS app_user (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL,
  deleted_at TIMESTAMP,
  password VARCHAR(255) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  role INT NOT NULL,
  active_email VARCHAR(100) AS (CASE WHEN deleted_at IS NULL THEN email ELSE NULL END) UNIQUE,
  CONSTRAINT fk_app_user_role FOREIGN KEY (role) REFERENCES role (id)
);

-- -----------------------------------------------------
-- Table transfer
-- -----------------------------------------------------
DROP TABLE IF EXISTS transfer;

CREATE TABLE IF NOT EXISTS transfer (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sender INT NOT NULL,
  receiver INT NOT NULL,
  description VARCHAR(255) NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  fees DECIMAL(10,3) DEFAULT 0.005 NOT NULL,
  total_amount DECIMAL(10,2) AS (ROUND(amount * (1 + fees), 2)),
  date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT fk_transfer_sender FOREIGN KEY (sender) REFERENCES app_user (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_transfer_receiver FOREIGN KEY (receiver) REFERENCES app_user (id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- -----------------------------------------------------
-- Table user_beneficiary
-- -----------------------------------------------------
DROP TABLE IF EXISTS user_beneficiary;

CREATE TABLE IF NOT EXISTS user_beneficiary (
  user_id INT NOT NULL,
  beneficiary_id INT NOT NULL,
  PRIMARY KEY (user_id, beneficiary_id),
  CONSTRAINT fk_userbeneficiary_user FOREIGN KEY (user_id) REFERENCES app_user (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_userbeneficiary_beneficiary FOREIGN KEY (beneficiary_id) REFERENCES app_user (id) ON DELETE CASCADE ON UPDATE CASCADE
);
